import pandas as pd
from sklearn.cross_decomposition import PLSRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
import numpy as np
import matplotlib.pyplot as plt

# Cargar tus datos espectrales y de referencia
data = pd.read_csv('datos_espectrales_Prueba2.csv')
y = pd.read_csv('datosReferencia.csv')

# Preprocesamiento de datos
scaler = StandardScaler()
X_scaled = scaler.fit_transform(data)
y_scaled = scaler.fit_transform(y)

# División en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size=0.2, random_state=42)
# Crear el modelo PLS con un número de componentes (número de factores latentes)
n_components = 2  # puedes ajustar este valor según lo que funcione mejor para tus datos
pls = PLSRegression(n_components=n_components)

# Entrenar el modelo
pls.fit(X_train, y_train)


# Predecir los niveles de carbohidratos en el conjunto de prueba
y_pred = pls.predict(X_test)
print(y_pred)


# Graficar los valores reales vs los valores predichos
plt.scatter(y_test, y_pred)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=4)
plt.xlabel('Valores Reales')
plt.ylabel('Valores Predichos')
plt.title('Valores Reales vs Valores Predichos')
plt.show()

# Calcular el error cuadrático medio

mse = mean_squared_error(y_test, y_pred)
print("Error cuadrático medio:", mse)
r2=r2_score(y_test, y_pred)
print("Coeficiente de Correlación:",r2)
